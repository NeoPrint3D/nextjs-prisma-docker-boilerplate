# Use Node.js 20 Alpine as the base image
FROM node:20-alpine AS deps

# Install necessary dependencies
RUN apk add --no-cache libc6-compat

# Set the working directory
WORKDIR /app

# Copy package files and install dependencies
COPY package.json package-lock.json ./
COPY .env.prod .env
RUN npm ci

# Copy Prisma schema and generate client
COPY prisma ./prisma/
RUN npx prisma generate

# Create a non-root user
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 migratoruser

# Copy migration scripts
COPY --chown=migratoruser:nodejs prisma ./prisma/

# Switch to non-root user
USER migratoruser

# Set the command to run migrations
CMD ["npx", "prisma", "migrate", "deploy"]

# Rebuild the source code only when needed
FROM node:20-alpine AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/.env .env
COPY . .

# Generate Prisma client
RUN npx prisma generate

# Build the application
RUN npm run build

# Production image, copy all the files and run next
FROM node:20-alpine AS runner
WORKDIR /app
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Create a non-root user
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy necessary files
COPY --from=builder /app/public ./public
COPY --from=builder /app/package.json ./package.json
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/start.sh ./
COPY --chown=nextjs:nodejs prisma ./prisma/
COPY --chown=nextjs:nodejs --from=builder /app/node_modules ./node_modules
RUN npm i prisma --save
USER nextjs
EXPOSE 3000
CMD ["npm", "run", "worker:prod:start", "&", "npm", "run", "start"]
